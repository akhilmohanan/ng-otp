{"version":3,"sources":["ng://ng-otp/lib/ng-otp.service.ts","ng://ng-otp/lib/ng-otp.component.ts","ng://ng-otp/lib/ng-otp.module.ts"],"names":["NgOtpService","prototype","isEmptySting","string","isLastInput","index","limit","getElement","document","querySelector","Injectable","args","providedIn","NgOtpComponent","setFormBuilder","_this","this","otpForm","formBuilder","group","limitArray","Array","from","keys","map","element","addControl","FormControl","Validators","required","changeFocus","id","currentElement","ngOtpService","value","moveBackward","select","moveForward","otpOut","emit","Object","values","join","focus","onFocus","ngOnDestroy","subscription","unsubscribe","Component","selector","template","FormBuilder","Input","Output","EventEmitter","changeFocus$","Subject","Subscription","add","pipe","throttleTime","subscribe","NgOtpModule","NgModule","declarations","imports","BrowserModule","ReactiveFormsModule","exports"],"mappings":"weAAA,IAAAA,GASEA,EAAAC,UAAAC,aAAA,SAAaC,GACX,MAAkB,KAAXA,GAGTH,EAAAC,UAAAG,YAAA,SAAYC,EAAOC,GACjB,OAAOD,IAAUC,GAGnBN,EAAAC,UAAAM,WAAA,SAAWF,GACT,OAAOG,SAASC,cAAgC,QAAQJ,wBAhB3DK,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAZ,KCPF,IAAAa,GAmCEA,EAAAZ,UAAAa,eAAA,WAAA,IAAAC,EAAAC,KACEA,KAAKC,QAAUD,KAAKE,YAAYC,MAAM,IACtCH,KAAKI,WAAaC,MAAMC,KAAKD,MAAML,KAAKV,OAAOiB,QAC/CP,KAAKI,WAAWI,IAAG,SAAEC,GACnBV,EAAKE,QAAQS,WAAW,OAAOD,EAAW,IAAIE,EAAAA,YAAY,GAAIC,EAAAA,WAAWC,cAI7EhB,EAAAZ,UAAA6B,YAAA,SAAYC,OACJC,EAAmChB,KAAKiB,aAAa1B,WAAWwB,GAClEA,GAAMf,KAAKiB,aAAa/B,aAAa8B,EAAeE,OACtDlB,KAAKmB,aAAaJ,GACTf,KAAKiB,aAAa7B,YAAY2B,EAAIf,KAAKV,MAAQ,GACxD0B,EAAeI,SACLpB,KAAKiB,aAAa/B,aAAa8B,EAAeE,QACxDlB,KAAKqB,YAAYN,GAEnBf,KAAKsB,OAAOC,KAAKC,OAAOC,OAAOzB,KAAKC,QAAQiB,OAAOQ,KAAK,MAG1D7B,EAAAZ,UAAAoC,YAAA,SAAYN,GAC4Bf,KAAKiB,aAAa1B,WAAWwB,EAAK,GAC5DY,SAGd9B,EAAAZ,UAAAkC,aAAA,SAAaJ,GAC2Bf,KAAKiB,aAAa1B,WAAWwB,EAAK,GAC5DY,SAGd9B,EAAAZ,UAAA2C,QAAA,SAAQb,GACmCf,KAAKiB,aAAa1B,WAAWwB,GACvDK,UAGjBvB,EAAAZ,UAAA4C,YAAA,WACE7B,KAAK8B,aAAaC,mCAjErBC,EAAAA,UAASrC,KAAA,CAAC,CACTsC,SAAU,SACVC,SAAA,saAPOC,EAAAA,mBACAnD,oCAWNoD,EAAAA,sBACAC,EAAAA,UA4DHxC,GArDE,SAAAA,EACUK,EACAe,GAFV,IAAAlB,EAAAC,KACUA,KAAAE,YAAAA,EACAF,KAAAiB,aAAAA,EAVDjB,KAAAV,MAAQ,EACPU,KAAAsB,OAAS,IAAIgB,EAAAA,aAGvBtC,KAAAI,WAAa,GACbJ,KAAAuC,aAAe,IAAIC,EAAAA,QACnBxC,KAAA8B,aAAe,IAAIW,EAAAA,aAMjBzC,KAAKF,iBACLE,KAAK8B,aAAaY,IAAI1C,KAAKuC,aACxBI,KACCC,EAAAA,aAAa,MACbC,UAAS,SACRxD,GAAoBU,EAAKe,YAAYzB,MC9B9C,IAAAyD,uBAMCC,EAAAA,SAAQpD,KAAA,CAAC,CACRqD,aAAc,CAACnD,GACfoD,QAAS,CACPC,EAAAA,cACAC,EAAAA,qBAEFC,QAAS,CAACvD,OAEeiD,GAR3B,SAAAA","sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgOtpService {\n\n  constructor() { }\n\n  isEmptySting(string: string) {\n    return string === '';\n  }\n\n  isLastInput(index, limit) {\n    return index === limit;\n  }\n\n  getElement(index) {\n    return document.querySelector<HTMLInputElement>(`#otp-${index}`);\n  }\n}\n","import { Component, Input, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { NgOtpService } from './ng-otp.service';\nimport { Subject, Subscription } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'ng-otp',\n  templateUrl: './ng-otp.component.html',\n  styleUrls: ['./ng-otp.component.scss']\n})\nexport class NgOtpComponent implements OnDestroy {\n\n  @Input() limit = 4;\n  @Output() otpOut = new EventEmitter();\n\n  otpForm: FormGroup;\n  limitArray = [];\n  changeFocus$ = new Subject();\n  subscription = new Subscription();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private ngOtpService: NgOtpService\n  ) {\n    this.setFormBuilder();\n    this.subscription.add(this.changeFocus$\n      .pipe(\n        throttleTime(100)\n      ).subscribe(\n        (index: number) => { this.changeFocus(index); }\n      )\n    );\n  }\n\n  setFormBuilder() {\n    this.otpForm = this.formBuilder.group({});\n    this.limitArray = Array.from(Array(this.limit).keys());\n    this.limitArray.map((element) => {\n      this.otpForm.addControl(`otp-${element}`, new FormControl('', Validators.required));\n    });\n  }\n\n  changeFocus(id: number) {\n    const currentElement: HTMLInputElement = this.ngOtpService.getElement(id);\n    if (id && this.ngOtpService.isEmptySting(currentElement.value)) {\n      this.moveBackward(id);\n    } else if (this.ngOtpService.isLastInput(id, this.limit - 1)) {\n      currentElement.select();\n    } else if (!this.ngOtpService.isEmptySting(currentElement.value)) {\n      this.moveForward(id);\n    }\n    this.otpOut.emit(Object.values(this.otpForm.value).join(''));\n  }\n\n  moveForward(id: number) {\n    const nextElement: HTMLInputElement = this.ngOtpService.getElement(id + 1);\n    nextElement.focus();\n  }\n\n  moveBackward(id: number) {\n    const nextElement: HTMLInputElement = this.ngOtpService.getElement(id - 1);\n    nextElement.focus();\n  }\n\n  onFocus(id) {\n    const currentElement: HTMLInputElement = this.ngOtpService.getElement(id);\n    currentElement.select();\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgOtpComponent } from './ng-otp.component';\n\nimport {ReactiveFormsModule} from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [NgOtpComponent],\n  imports: [\n    BrowserModule,\n    ReactiveFormsModule\n  ],\n  exports: [NgOtpComponent]\n})\nexport class NgOtpModule { }\n"]}